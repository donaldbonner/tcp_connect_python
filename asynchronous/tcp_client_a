#!/usr/bin/env python
import socket
import time
import sys
import subprocess
from multiprocessing import Process

global clientName
clientName = ""

""" http://docs.python.org/2.7/library/socket.html """
""" returns socket s that is connected to port at ip_connect """
def connect_to(ip_connect, port):
    for res in socket.getaddrinfo(ip_connect, port, socket.AF_UNSPEC, socket.SOCK_STREAM):
        af, socktype, proto, canonname, sa = res
        try:
            s = socket.socket(af, socktype, proto)
        except socket.error as msg:
            s = None
            continue
        try:
            s.connect(sa)
        except socket.error as msg:
            s.close()
            s = None
            continue
        break
    if s is None:
        print 'could not open connection'
        return None
    return s   
""" returns the connection socket and the address connected to (conn, addr) """
def thread_listen(host, port):
    print 'thread_listen'    

def main():
    port = 9999
    """ set up parameters needed """
    hostname = raw_input("Enter a username : ")
    """ip_connect = "192.168.0.106"""
    ip_connect = raw_input("Enter IP to connect to: ")
    """print "Connecting to " + ip_connect"""   

    """ make the connection on unused port"""
    s = connect_to(ip_connect, port)
    while True:
        if s is None:
            print 'port', port, 'busy, trying', port - 1
            port =- 1
            s = connect_to(ip_connect, port)  
        else:
            break

    s.sendall(hostname)
    clientName = s.recv(1024)
    
    """
    p = Process(target=thread_listen, args=(None, port-1))
    p.start()
    """
    f = s.makefile() 
    subprocess.call(["clear"])
    print 'Connected to', clientName
    print 'To exit chat, type', repr('.logout') 

    toSend = None
    while 1:
        toSend =  raw_input('>')
        if toSend == ".logout": break
        f.write(toSend)
        f.flush()
    s.close()
    print 'connection with ' + clientName + ' closed'
    """p.join()"""

if __name__ == "__main__":
    main()
