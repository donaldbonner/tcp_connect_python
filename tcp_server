#!/usr/bin/env python
import socket
import sys
import subprocess

host = None
port = 9999
s = None
hostname = ""
data = None
clientName = None

""" make sure port is not used """
"""
def isPortUsed(port):
    curr = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    result = curr.connect_ex(('127.0.0.1', port))
    if result != 0 :
        print 'port ' + str(port) + ' is in use' 
        curr.close()
        return -1
    curr.close()
    return port
"""

""" Get local inet_ip address """
def getInetIP():
    try:
	socket.gethostbyname(socket.gethostname())
    except socket.error as msg:
        print "Not connected to the interwebs"
        sys.exit(1)
    return socket.gethostbyname(socket.gethostname())

""" http://docs.python.org/2.7/library/socket.html """
""" returns socket s that is connected to port at ip_connect """
def child_connect_to(ip_connect, port):
    for res in socket.getaddrinfo(ip_connect, port, socket.AF_UNSPEC, socket.SOCK_STREAM):
        af, socktype, proto, canonname, sa = res
        try:
            s = socket.socket(af, socktype, proto)
        except socket.error as msg:
            s = None
            continue
        try:
            s.connect(sa)
        except socket.error as msg:
            s.close()
            s = None
            continue
        break
    if s is None:
        print 'could not open connection'
        sys.exit(1)
    print 'child connected to', ip_connect
    return s
""" returns the connection socket and the address connected to (conn, addr) """
def listen_to(host, port):
    for res in socket.getaddrinfo(host, port, socket.AF_UNSPEC,
                                  socket.SOCK_STREAM, 0, socket.AI_PASSIVE):
        af, socktype, proto, canonname, sa = res
        try:
            s = socket.socket(af, socktype, proto)
        except socket.error as msg:
            s = None
            continue
        try:
            s.bind(sa)
            s.listen(1)
        except socket.error as msg:
            s.close()
            s = None
            continue
        break
    if s is None:
        print 'could not open connection'
        sys.exit(1)
    conn, addr = s.accept()
    return conn, addr

""" set up informatino and give host ip address """
print "This machines IP address is " + getInetIP()
hostname = raw_input("Enter a username : ")
conn, addr = listen_to(None, port)

"""print 'Connected by', str(addr)"""
"""
while 1:
    clientName = conn.recv(1024)
    if not clientName: break
    print 'Client name : ', repr(clientName)
    conn.send(hostname)
"""
clientName = conn.recv(1024)
subprocess.call(["clear"])
print 'Connected to', clientName
conn.send(hostname)

while 1:
    data = conn.recv(1024)
    if not data: 
        print 'connection with ' + clientName + ' closed'
        break
    print clientName + ':' + data
conn.close()