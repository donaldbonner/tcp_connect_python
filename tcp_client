#!/usr/bin/env python
import socket
import sys
import subprocess
from multiprocessing import process

s = None
port = 9999
hostname = ""

""" http://docs.python.org/2.7/library/socket.html """
""" returns socket s that is connected to port at ip_connect """
def connect_to(ip_connect, port):
    for res in socket.getaddrinfo(ip_connect, port, socket.AF_UNSPEC, socket.SOCK_STREAM):
        af, socktype, proto, canonname, sa = res
        try:
            s = socket.socket(af, socktype, proto)
        except socket.error as msg:
            s = None
            continue
        try:
            s.connect(sa)
        except socket.error as msg:
            s.close()
            s = None
            continue
        break
    if s is None:
        print 'could not open connection'
        sys.exit(1)
    return s   
""" returns the connection socket and the address connected to (conn, addr) """
def child_listen_to(host, port):
    for res in socket.getaddrinfo(host, port, socket.AF_UNSPEC,
                                  socket.SOCK_STREAM, 0, socket.AI_PASSIVE):
        af, socktype, proto, canonname, sa = res
        try:
            s = socket.socket(af, socktype, proto)
        except socket.error as msg:
            s = None
            continue
        try:
            s.bind(sa)
            s.listen(1)
        except socket.error as msg:
            s.close()
            s = None
            continue
        break
    if s is None:
        print 'could not open connection'
        sys.exit(1)
    conn, addr = s.accept()
    return conn, addr

""" set up parameters needed """
hostname = raw_input("Enter a username : ")
"""ip_connect = "192.168.0.106"""
ip_connect = raw_input("Enter IP to connect to: ")
"""print "Connecting to " + ip_connect"""

""" make the connection """
s = connect_to(ip_connect, port)
s.sendall(hostname)
clientName = s.recv(1024)
subprocess.call(["clear"])
print 'Connected to', clientName
print 'To exit chat, type', repr('.logout')

toSend = None
while 1:
    toSend = raw_input('>')
    if toSend == ".logout": break
    s.sendall(toSend)
s.close()
